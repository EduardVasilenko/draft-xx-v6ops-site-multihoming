Another possible approach is shifting the Internet access resiliency problem to an explicit application proxy similar to the one described in [IP Proxy], that can be placed anywhere in the network. Traditionally, enterprise networks have often relied on proxies to enable Internet access for clients. The primary motivation for this has not been to provide network functionality but to enforce policy, authenticate users, and perform traffic filtering. The caveats for this mechanism to work are essentially two, namely that both the clients and the applications they are accessing support the use of an application proxy. "Transparent" proxies which sit in the traffic path, similar to those described in Section 4 of [IP Proxy], have also been employed to negate the requirement for clients to be configured to use the application proxy. With regards to the Site Multi-homing problem, however, this configuration is functionally equivalent to the scenario in 5.4 while having no advantages compared to it; for this reason, this section deals exclusively with explicitly configured proxies accepting traffic destined to an address owned by them.
By proxying connections at the transport layer and above, thus splitting the connection into 2 parts, there is an inherent possibility to use a different source address for the second, upstream half of the connection; in an IPv4 environment, this can in some cases replace address translation in environments where private address space is used by the clients. A similar possibility exists in an IPv6 environment, allowing end hosts to communicate with the Internet even if they only possess ULA or otherwise non-globally reachable addresses as long as they can reach the application proxy. The use of a proxy in an IPv6 site with multi-homing requirements thus allows for the following configuration:
- Two or more Internet gateways from diverse carriers, receiving and advertising PA GUA address space on the network,
- An application proxy provisioned with a ULA address as well as PA addresses from each Internet uplink,
- Clients provisioned with ULA addresses to communicate with internal destinations and the proxy, and only optionally PA addresses.
In such a configuration clients support, and are configured for, the proxying of outbound connections through the explicit application proxy. The connection to the proxy then uses ULA addresses exclusively, and the second part of the connection from the application proxy out to the Internet can use a viable PA source address selected from the available prefixes. In this manner, clients are relieved of the duty to select a GUA source as well as tracking of the health and validity of related prefixes. This leaves the source GUA selection, and in turn the link selection, to the proxy itself. In this case, tracking of the health of each Internet link needs to be performed in only one host, i.e. the proxy, and such tracking is facilitated further in the case where the proxy and the Internet gateways are the same devices.
Available technologies for signaling and establishing proxied connections include [HTTP], [SOCKS], and, recently, [MASQUE], which allow the application proxy host to interject at various layers of the stack up to the application itself, supporting TCP, UDP, and even the forwarding of raw IP datagrams. Discussion of the low-level workings of such technologies is out of the scope of this document.
Owing to the extensive past usage of Web proxies and the dominance of HTTP and HTTPS in the outbound component of enterprise network traffic, a client in the enterprise can typically perform nearly all of its interactions with the Internet through a proxy, but several direct connections are often required for some applications; in the scenario described in this section, the client is free to reach Internet destinations in such a manner if it is provisioned with one or more of the actual PA prefixes coming from the Internet links, and if such traffic is not restricted by other on-path devices such as firewalls. Using its ULA addresses may even work for direct communication, with the caveats outlined in sections 5.3 and 5.4. For any traffic generated by clients which bypasses the proxy, all considerations listed in sections 5.2, 5.3, and 5.4 apply.
The device hosting the application proxy itself is in a situation comparable to the one described in section 5.2, but the process or daemon which performs the proxy functions can be placed arbitrarily close or even inside the gateways. This mitigates a number of the disadvantages listed in 5.2, namely:
- "Prefixes may not get deprecated when the CPE itself fails": the application proxy can track the health of each prefix using active polling and other proprietary methods.
- "Carriers may frequently change the prefix (flash renumbering)": renumbering is simplified as it only needs to occur on one host, and any patches and upgrades of the network stack required to support newer and more robust renumbering mechanisms are simplified. Additionally, if the application proxy is the gateway itself, it can become aware of any new prefixes without having to employ any kind of network signaling.
- "Sites with complex topologies are not well supported": the application proxy can be positioned in the subnet and link which is shared by the internal interface of all the site's Internet gateways, recreating the "simple topology" condition. Clients reach the proxy using ULA and conventional routing is sufficient in the more complex, internal part of the network.
- "Traffic steering by any policies is not supported yet": link selection is centralized in the application proxy, which can enforce steering policies of various kinds.
Communication inbound from the Internet toward clients is impossible in a purely proxy-based scenario and requires that clients be provisioned with GUAs in addition to the ULA they employ to reach the proxy. All considerations in 5.2 are applicable in this case. Additionally, if an application supports and the clients opt to use the proxy for it, outbound usage of such an application results in a completely different mechanism (an application proxy) and a different GUA address than the one used for inbound sessions. It is however likely that the host inside the site is acting purely as a client for such an application, and any peer-to-peer or server applications running on the host are elected for bypassing the proxy.
Modern client operating systems offer several standardized ways of configuring the use of an application proxy, including manual and automatic techniques in which the proxy, as well as the list of destinations to be proxied, is auto-discovered by the client upon joining the network. Discussion of these techniques is out of the scope of this document, but they constitute a hard limit on the applicability of proxies as described in this section. If the number of hosts that do not support automatic configuration is large, provisioning of the proxy may become impractical or impossible. This is further compounded by the fact that an ever-increasing number of hosts in enterprise networks is headless and/or unmanaged, such as IoT devices, and may not even support proxies at all or not support a way of configuring them. Any such device would need to resort to one of the other options described in this document to gain Internet access and benefit from multi-homing. Network designers may find that, in such cases, the need to mix and match solutions has operational drawbacks that outweigh the advantages of using a proxy.
It is also crucial to keep in mind that the use of an application proxy does not technically constitute a solution to the issue of IPv6 multi-homing, which is a network problem. This is obvious for two reasons:
- The solution operates at the transport layer and above,
- The device hosting the application proxy faces the same fundamental challenges and ultimately has the same options for multi-homing as discussed in sections 5.1-5.4. As such, what is described in this section could be considered an upper-layer workaround to a network problem.
Advantages:
- No NAT, communication is terminated and re-established at a higher layer using a different source address, and the client is aware of this,
- No need to own and operate a registered, Provider-Independent address space,
- ULA usage is ULA to ULA, avoiding the need to engineer ULA prioritization above IPv4 in the [SASA] policy table,
- Organizations may already be using an application proxy,
- Supports sites with complex topology,
- Supports outbound traffic steering,
- Potential for traffic distribution policy between different carriers.
Disadvantages:
- No E2E unless the client has GUA as well, and even then outbound and inbound use different mechanisms,
- Proxy provisioning and discovery,
- The application proxy is an additional point of failure in the network, and ensuring its redundancy could bring increased costs and complexity,
- Requires explicit application and/or protocol support,
- Requires explicit client support,
- While not NAT66, sessions must still be tracked in a stateful manner by the application proxy,
- Splitting the flow of data at the application layer is computationally expensive and can incur performance penalties far over a traditional network hop.
